<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Gokul Nair</title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on Gokul Nair</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jun 2024 23:18:39 +0200</lastBuildDate>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First blog</title>
      <link>//localhost:1313/posts/firstblog/</link>
      <pubDate>Fri, 28 Jun 2024 23:18:39 +0200</pubDate>
      <guid>//localhost:1313/posts/firstblog/</guid>
      <description>Bla Bla Bla fgdygfdgfjds dfhfusfhdhliusdfdshfkusd dgfdgfufubfkh,fuwekuf</description>
    </item>
    <item>
      <title>Understanding Java Generics</title>
      <link>//localhost:1313/posts/postgresfunction/</link>
      <pubDate>Tue, 10 Oct 2023 12:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/postgresfunction/</guid>
      <description>Understanding Java Generics Java Generics is a feature introduced in Java 5 that allows for type parameterization, enabling developers to create reusable code that can work with different types while maintaining type safety. Here&amp;rsquo;s a brief overview:
What are Generics? Generics allow you to define classes, interfaces, and methods where the type of data they work with is specified as a parameter. This means you can write code that is more flexible and reusable.</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/javaclasses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/javaclasses/</guid>
      <description>Java Classes: A Deep Dive Java classes are the building blocks of Java applications. Here&amp;rsquo;s an in-depth look at what makes them so powerful:
Constructors Constructors are special methods used to initialize objects:
public class MyClass { private String name; // Constructor public MyClass(String name) { this.name = name; } } Static Members Static members belong to the class rather than instances:
public class MyClass { public static int count = 0; public MyClass() { count++; } } Interfaces Interfaces define a contract for classes to implement:</description>
    </item>
  </channel>
</rss>
