<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Gokul Nair</title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on Gokul Nair</description>
    <generator>Hugo -- 0.147.3</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 May 2025 11:30:03 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Graphing the Future: Leveraging Neo4j and Spring Boot for Smarter Data Modeling - Part1(Introduction and local setup)</title>
      <link>//localhost:1313/posts/neo4j/</link>
      <pubDate>Thu, 15 May 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j/</guid>
      <description>&lt;p&gt;Recently at work, I had the opportunity to dive into a new product that deals with highly complex, hierarchical data schemasâ€”deeply interconnected across multiple levels of business domains. To put it simply: imagine pulling structured data from physical documents, then transforming and presenting that data differently for different teamsâ€”each with their own use cases and logic.&lt;/p&gt;
&lt;p&gt;Now, the fun (and frustration) really began when we had to handle these transformations. Some were done using custom functions, others using Java reflection (yes, you read it rightðŸ˜„, some teams use reflection!!).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Supercharging Your PostgreSQL with Functions &amp; Stored Procedures</title>
      <link>//localhost:1313/posts/postgresfunction/</link>
      <pubDate>Wed, 01 Jan 2025 12:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/postgresfunction/</guid>
      <description>&lt;p&gt;Picture this: Youâ€™re juggling the same SQL queries day in and day out, feeling like Bill Murray in &lt;em&gt;Groundhog Day&lt;/em&gt;. If only you had a way to &lt;em&gt;wrap&lt;/em&gt; your repetitive queries into neatly packaged, reusable code blocksâ€¦ Well, guess what? &lt;strong&gt;PostgreSQL&lt;/strong&gt; has got your back with its &lt;strong&gt;Functions&lt;/strong&gt; and &lt;strong&gt;Stored Procedures&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;In this post, weâ€™ll explore what these two can do for you, how to build them, and why they might just become your new best friends (no offense to your dog, of course).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
