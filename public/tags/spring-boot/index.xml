<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on Gokul Nair</title>
    <link>//localhost:1313/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on Gokul Nair</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Aug 2025 11:30:03 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real World Runs on Graphs!!ðŸ“ˆ : A Hands-On Intro to Neo4j (Part 1)</title>
      <link>//localhost:1313/posts/neo4j/</link>
      <pubDate>Fri, 01 Aug 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j/</guid>
      <description>&lt;h2 id=&#34;graph-database-what-and-how&#34;&gt;Graph database what and how?&lt;/h2&gt;&#xA;&lt;p&gt;Recently at work, I had the opportunity to dive into a new product that deals with highly complex, hierarchical data schemasâ€”deeply interconnected across multiple levels of business domains. To put it simply: imagine an ETL process pulling structured data from physical documents and presenting that data differently for different teamsâ€”each with their own use cases and logic.&lt;/p&gt;&#xA;&lt;p&gt;Now, the fun (and frustration) really began when we start thinking about how to handle these transformations. Some were done using custom functions, others using Java reflection (yes..yes, you read it right, we use java reflectionðŸ™ƒ).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real World Runs on Graphs!!ðŸ“ˆ : Lets Make Users Social Again!! (Part 2)</title>
      <link>//localhost:1313/posts/neo4j2/</link>
      <pubDate>Thu, 17 Jul 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j2/</guid>
      <description>&lt;h2 id=&#34;a-quick-rewind&#34;&gt;A quick rewind!!&lt;/h2&gt;&#xA;&lt;p&gt;In the previous post, we implemented user creation and successfully tested it via API endpoints. In this post, weâ€™re taking things a step further by adding key features that make our application feel more like a real social network. Hereâ€™s what weâ€™ll explore:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Enabling users to follow each other&lt;/li&gt;&#xA;&lt;li&gt;Writing expressive queries using Cypher Query Language&lt;/li&gt;&#xA;&lt;li&gt;Allowing users to create posts&lt;/li&gt;&#xA;&lt;li&gt;Adding support for likes and comments on posts&lt;/li&gt;&#xA;&lt;li&gt;Setting up a Vector Database for RAG (Retrieval-Augmented Generation)&lt;/li&gt;&#xA;&lt;li&gt;Integrating Spring AI into the backend&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Letâ€™s jump in and build out these social features step by step!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
