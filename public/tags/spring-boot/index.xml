<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Spring Boot on Gokul Nair</title>
    <link>//localhost:1313/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on Gokul Nair</description>
    <generator>Hugo -- 0.147.3</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Sep 2025 11:30:03 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Real World Runs on Graphs!!ðŸ“ˆ : In the begining there was BROK!! (Part 3(final))</title>
      <link>//localhost:1313/posts/neo4j3/</link>
      <pubDate>Fri, 05 Sep 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j3/</guid>
      <description>&lt;h2 id=&#34;a-quick-rewind&#34;&gt;A quick rewind!!&lt;/h2&gt;
&lt;p&gt;In my last post, we built some of the core social features for our app â€” users can now follow each other, comment on posts, and hit that like button. Along the way, I also shared a bit about working with Cypher (Neo4jâ€™s query language) and how we used Pinecone as a vector store to index our data for similarity search, which is an important piece for our RAG (Retrieval-Augmented Generation) setup.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Real World Runs on Graphs!!ðŸ“ˆ : Lets Make Users Social Again!! (Part 2)</title>
      <link>//localhost:1313/posts/neo4j2/</link>
      <pubDate>Fri, 01 Aug 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j2/</guid>
      <description>In this post, weâ€™ll implement core social media features such as allowing users to follow others, create posts, and interact with them through likes and comments. Additionally, weâ€™ll set up a vector-based document storage system, which will serve as the foundation for integrating Retrieval-Augmented Generation (RAG) capabilities into our application.</description>
    </item>
    <item>
      <title>Real World Runs on Graphs!!ðŸ“ˆ : A Hands-On Intro to Neo4j (Part 1)</title>
      <link>//localhost:1313/posts/neo4j/</link>
      <pubDate>Sun, 20 Jul 2025 11:30:03 +0000</pubDate>
      <guid>//localhost:1313/posts/neo4j/</guid>
      <description>&lt;h2 id=&#34;graph-database-what-and-how&#34;&gt;Graph database what and how?&lt;/h2&gt;
&lt;p&gt;Recently at work, I had the opportunity to dive into a new product that deals with highly complex, hierarchical data schemasâ€”deeply interconnected across multiple levels of business domains. To put it simply: imagine an ETL process pulling structured data from physical documents and presenting that data differently for different teamsâ€”each with their own use cases and logic.&lt;/p&gt;
&lt;p&gt;Now, the fun (and frustration) really began when we start thinking about how to handle these transformations. Some were done using custom functions, others using Java reflection (yes..yes, you read it right, we use java reflectionðŸ™ƒ).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
