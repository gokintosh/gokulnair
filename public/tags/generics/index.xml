<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Generics on Gokul Nair</title>
    <link>//localhost:1313/tags/generics/</link>
    <description>Recent content in Generics on Gokul Nair</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Oct 2023 12:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/generics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding Java Generics</title>
      <link>//localhost:1313/posts/postgresfunction/</link>
      <pubDate>Tue, 10 Oct 2023 12:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/postgresfunction/</guid>
      <description>Understanding Java Generics Java Generics is a feature introduced in Java 5 that allows for type parameterization, enabling developers to create reusable code that can work with different types while maintaining type safety. Here&amp;rsquo;s a brief overview:
What are Generics? Generics allow you to define classes, interfaces, and methods where the type of data they work with is specified as a parameter. This means you can write code that is more flexible and reusable.</description>
    </item>
  </channel>
</rss>
