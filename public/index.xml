<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gokul Nair</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Gokul Nair</description>
    <generator>Hugo -- 0.128.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jan 2025 12:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Supercharging Your PostgreSQL with Functions &amp; Stored Procedures</title>
      <link>//localhost:1313/posts/postgresfunction/</link>
      <pubDate>Wed, 01 Jan 2025 12:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/postgresfunction/</guid>
      <description>Picture this: You’re juggling the same SQL queries day in and day out, feeling like Bill Murray in Groundhog Day. If only you had a way to wrap your repetitive queries into neatly packaged, reusable code blocks… Well, guess what? PostgreSQL has got your back with its Functions and Stored Procedures!
In this post, we’ll explore what these two can do for you, how to build them, and why they might just become your new best friends (no offense to your dog, of course).</description>
    </item>
    <item>
      <title>First blog</title>
      <link>//localhost:1313/posts/firstblog/</link>
      <pubDate>Fri, 28 Jun 2024 23:18:39 +0200</pubDate>
      <guid>//localhost:1313/posts/firstblog/</guid>
      <description>Bla Bla Bla fgdygfdgfjds dfhfusfhdhliusdfdshfkusd dgfdgfufubfkh,fuwekuf</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/javaclasses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/javaclasses/</guid>
      <description>Java Classes: A Deep Dive Java classes are the building blocks of Java applications. Here&amp;rsquo;s an in-depth look at what makes them so powerful:
Constructors Constructors are special methods used to initialize objects:
public class MyClass { private String name; // Constructor public MyClass(String name) { this.name = name; } } Static Members Static members belong to the class rather than instances:
public class MyClass { public static int count = 0; public MyClass() { count++; } } Interfaces Interfaces define a contract for classes to implement:</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/search/</guid>
      <description> </description>
    </item>
  </channel>
</rss>
